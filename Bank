import java.util.ArrayList;


public class Bank {
	
	/** Skapar en ny bank utan konton. */
	
private ArrayList<BankAccount> accounts;
	
	Bank(){
		this.accounts = new ArrayList<BankAccount>();
	}
	
	/**
	* Öppna ett nytt konto i banken. Om det redan finns en kontoinnehavare
	* med de givna uppgifterna ska inte en ny Customer skapas, utan istället
	* den befintliga användas. Det nya kontonumret returneras.
	*/
	int addAccount(String holderName, long idNr) {
		int pos = 0;
		while (pos < accounts.size() && accounts.get(pos).getHolder().getName().compareTo(holderName) < 0) {
			pos++;
		}
			if (findHolder(idNr)==null) {
				accounts.add(pos, new BankAccount(findHolder(idNr)));
				//Lägger till ett konto jämsesides med kontot
			}
			else {
				accounts.add(pos + 1, new BankAccount(findHolder(idNr)));
				//skapar konto
			}
		
		return (accounts.get(pos).getAccountNumber());
	}
	
	/**
	* Returnerar den kontoinnehavaren som har det givna id-numret,
	* eller null om ingen sådan finns.
	*/
	Customer findHolder(long idNr) {
		for (int i = 0; i < accounts.size(); i++) {
			
			if (accounts.get(i).getHolder().getIdNr() == idNr) {
				return accounts.get(i).getHolder();
			}
		}
		return null;
	}
	
	/**
	* Tar bort konto med nummer 'number' från banken. Returnerar true om
	* kontot fanns (och kunde tas bort), annars false.
	*/
	boolean removeAccount(int number) {
		
	}
	
	/**
	* Returnerar en lista innehållande samtliga bankkonton i banken.
	* Listan är sorterad på kontoinnehavarnas namn.
	*/
	ArrayList<BankAccount> getAllAccounts(){
		
	}
	
	/**
	* Söker upp och returnerar bankkontot med kontonummer 'accountNumber'.
	* Returnerar null om inget sådant konto finns.
	*/
	BankAccount findByNumber(int accountNumber) {
		
	}
	
	/**
	* Söker upp alla bankkonton som innehas av kunden med id-nummer 'idNr'.
	* Kontona returneras i en lista. Kunderna antas ha unika id-nummer.
	*/
	ArrayList<BankAccount> findAccountsForHolder(long idNr){
		
	}
	
	/**
	* Söker upp kunder utifrån en sökning på namn eller del av namn. Alla
	* personer vars namn innehåller strängen 'namePart' inkluderas i
	* resultatet, som returneras som en lista. Samma person kan förekomma
	* flera gånger i resultatet. Sökningen är "case insensitive", det vill
	* säga gör ingen skillnad på stora och små bokstäver.
	*/
	ArrayList<Customer> findByPartofName(String namePart){
		
	}

}

//output = accounts.get(accounts.size()-1).getAccountNumber();
		//return output;
